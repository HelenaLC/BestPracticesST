# Clustering

## Dependencies

```{r deps, message=FALSE, warning=FALSE}
library(dplyr)
library(tidyr)
library(scran)
library(scater)
library(igraph)
library(ggspavis)
library(patchwork)
library(SpatialExperiment)
# load data from previous section
spe <- readRDS("img-spe_qc.rds")
# basic theme for spatial plots
theme_xy <- list(
    coord_equal(expand=FALSE), theme_void(),
    theme(panel.background=element_rect(fill="black")))
```

## Normalization

Library size-based normalization as is typical for scRNA-seq data has been shown to be problematic for ST data, especially so for targeted panels underlying current commercial imaging-based ST platforms [@Atta2024,@Bhuva2024].
For lack of a better approach, we here use standard log-library size normalization.
We caution readers, however, to keep an eye out in the literature for attempts to provide a better strategy.

```{r calc-norm}
spe <- logNormCounts(spe)
```

- `r BiocStyle::Biocpkg("BANKSY")`
- `r BiocStyle::Biocpkg("SpatialPCA")`

- `r BiocStyle::Biocpkg("InSituType")` [@Danaher2022-InSituType] has been developed for CosMx data, specifically. It relies on a probabilistic model, can incorporate non-transcriptional information (e.g., immunofluorescence, cell area and aspect ratio), and can be run in an un-, semi- or fully supervised setting (based on bulk references profiles for the latter two). Some profiles are available through `r BiocStyle::Biocpkg("SpatialDecon")` [@Danaher2022-SpatialDecon], but these may be acquired from custom reference data, e.g., from matching scRNA-seq data or snPATHO-seq data on adjacent sections).

## Supervised

## Unsupervised

### Spatially unaware

As a baseline, we will use a standard scRNA-seq clustering approach, namely, (spatially unaware) graph-based clustering based on a shared nearest neighbor (SNN) graph and the Louvain algorithm for community detection:

```{r calc-k, cache=TRUE}
set.seed(6963)
spe <- runPCA(spe)
g <- buildSNNGraph(spe, use.dimred="PCA", type="jaccard", k=10)
k <- cluster_louvain(g, resolution=0.5)$membership
table(spe$k <- factor(k, seq_along(unique(k))))
```

For custom visualizations, we collect cell metadata, spatial coordinates, and reduced dimensions (PCs) in a `data.frame`:

```{r prep-df}
df <- data.frame(
    colData(spe),           # cell metadata
    spatialCoords(spe),     # spatial coordinates
    reducedDim(spe, "PCA")) # principal components
```

Visualizing the tissue with cells colored by their cluster assignment, we see pronounced spatial organization of subpopulation despite not having considered spatial coordinates for clustering:

```{r plot-xy-k-joint, fig.width=4, fig.height=3}
#| collapse: true
pal <- hcl.colors(length(unique(df$k)), "Spectral")
ggplot(df, aes(x_centroid, y_centroid, col=k)) +
    guides(col=guide_legend(override.aes=list(size=2))) +
    geom_point(shape=16, stroke=0, size=0.2) +
    scale_color_manual(values=pal) +
    coord_equal(expand=FALSE) +
    theme_void() + theme(
        legend.key=element_blank(),
        legend.key.size=unit(0.5, "lines"),
        panel.background=element_rect(fill="black", color="white"))
```

Especially in large tissues, the above type of plot makes it difficult to spot rare subpopulations, and might cause cells to overlap in regions with high cellular density.
This can be misleading, as we will tend to see only highly abundant subpopulations, or the cells plotted last and on top (i.e., later columns in the object).

To better distinguish between different subpopulations, we can instead generate separate spatial plots with one subpopulation highlighted at a time:

```{r plot-xy-k-split, collapse=TRUE, fig.width=12, fig.height=4}
ps <- lapply(unique(df$k), \(.) 
    ggplot(df, aes(x_centroid, y_centroid, col=(k == .))) + 
    scale_color_manual(values=c("navy", "cyan")) + ggtitle(.))
wrap_plots(ps, nrow=2) & 
    coord_equal(expand=FALSE) &
    geom_point(shape=16, stroke=0, size=0.2) &
    theme_void() & theme(
        legend.position="none",
        plot.title=element_text(hjust=0.5),
        panel.background=element_rect(fill="black", color="white"))
```

For details on identifying genes that are differentially expressed (DE) between groups of cells (i.e., marker genes), we refer readers to [OSCA](https://bioconductor.org/books/3.19/OSCA.basic/marker-detection.html); an exemplary approach is shown below, visualizing the average expression of markers across clusters:

```{r mgs}
#| code-fold: true
mgs <- findMarkers(spe, groups=spe$k, direction="up")
top <- lapply(mgs, \(.) rownames(.)[.$Top <= 1])
top <- unique(unlist(top))
pbs <- aggregateAcrossCells(spe, 
    ids=spe$k, subset.row=top, 
    use.assay.type="logcounts", statistics="mean")
plotHeatmap(pbs, 
    colour_columns_by="k", fontsize=9,
    features=top, center=TRUE, scale=TRUE,
    cluster_cols=FALSE, cluster_rows=FALSE)
```

```{r plot-xy-expr, fig.width=4, fig.height=3}
#| collapse: TRUE
es <- as.matrix(t(logcounts(spe)[top, ]))
fd <- data.frame(df, es, check.names=FALSE)
ggplot(fd, aes(x_centroid, y_centroid, col=KRT14)) +
    coord_equal(expand=FALSE) +
    geom_point(shape=16, stroke=0, size=0.2) +
    scale_color_gradientn(colors=c("navy", "red", "gold", "ivory")) +
    theme_void() + theme(
        legend.key=element_blank(),
        legend.key.height=unit(1, "lines"),
        legend.key.width=unit(0.5, "lines"),
        panel.background=element_rect(fill="black"))
```

## Reduction

Exploratory data analysis (EDA) is crucial at every step; first and foremost after clustering and before performing downstream analyses towards biological insights.
A useful visualization is to color cells by their PCs in physical space. 
This will help highlight key drivers of transcriptional variability, e.g., between major biological compartments such as epithelia, immune and stromal cells.
Exemplary plots of PCs 1 and 2 are rendered below:

```{r plot-xy-pcs, collapse=TRUE, fig.width=8, fig.height=3}
ggplot(arrange(df, abs(PC1)), aes(x_centroid, y_centroid, col=PC1)) +
ggplot(arrange(df, abs(PC2)), aes(x_centroid, y_centroid, col=PC2)) +
    plot_layout(nrow=1) &
    coord_equal(expand=FALSE) &
    geom_point(shape=16, stroke=0, size=0.2) &
    scale_color_gradientn(colors=c("cyan", "navy", "magenta")) &
    theme_void() & theme(
        legend.position="bottom",
        legend.key.size=unit(0.5, "lines"),
        panel.background=element_rect(fill="black", color="white"))
```

::: {.callout-note title="PCs as RGB" collapse="true"}

#### PCs as RGB

A neat trick in this context is to rescale PC 1-3 values between 0 and 1, and interpret them as RGB values for visualization:

```{r pcs-to-rgb}
pcs <- reducedDim(spe)[, seq_len(3)]
pcs <- pcs-min(pcs); pcs <- pcs/max(pcs)
df$rgb <- apply(pcs, 1, \(.) do.call(rgb, as.list(as.numeric(.))))
```

E.g., we see that colors corresponding to opposing PC values are clearly separated in space, indicating distinct drivers of transcriptional variability.
In some regions, we see color mixtures, indicating cells of ambiguous transcriptional profiles (with respect to what is being captured by the 3 PCs considered here).

```{r plot-xy-rgb, fig.width=4, fig.height=3}
ggplot(df, aes(x_centroid, y_centroid, col=rgb)) +
    geom_point(shape=16, stroke=0, size=0.2) +
    scale_color_identity() + theme_xy
```

:::

::: {.callout-note title="PC regession" collapse="true"}

#### PC regession

For any single-cell analysis where downstream tasks rely on PCs, it is useful to perform linear regression of (continuous or categorical) covariates of interest onto PCs.
This quantifies the variance explained by the covariate and can help assess the extend of unwanted variation (due to, e.g., cell area) as opposed to subpopulations driving transcriptional differences.
Here, we regress total counts, cell area, and cluster assignments against PCs:

```{r calc-pcr}
pcs <- reducedDim(spe, "PCA")
ids <- c("total_counts", "cell_area", "k")
pcr <- lapply(ids, \(id) {
    fit <- summary(lm(pcs ~ spe[[id]]))
    r2 <- sapply(fit, \(.) .$adj.r.squared)
    data.frame(id, pc=seq_along(r2), r2)
}) |> 
    do.call(what=rbind) |>
    mutate(id=factor(id, ids))
```

```{r plot-pcr, fig.width=5, fig.height=2.5}
#| code-fold: true
ggplot(pcr, aes(pc, r2, col=id)) +
    geom_line(show.legend=FALSE) +
    geom_point() +
    coord_cartesian(xlim=c(1, 20)) +
    guides(col=guide_legend(override.aes=list(size=2))) +
    scale_x_continuous(breaks=c(1, seq(5, 20, 5))) +
    scale_y_continuous(limits=c(0, 1), breaks=seq(0, 1, 0.2)) +
    scale_color_manual("predictor", values=c("gold", "cyan", "magenta")) +
    labs(x="principal component", y="coeff. of determination") +
    theme_minimal() + theme(
        panel.grid.minor=element_blank(),
        legend.key.size=unit(0.5, "lines"))
```

:::

```{r save-data}
saveRDS(spe, "img-spe_cl.rds")
```

## References {.unnumbered}
